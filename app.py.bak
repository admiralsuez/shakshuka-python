from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import threading
import time
import schedule
from datetime import datetime, timedelta
import json
from data_manager import EncryptedDataManager
from autostart import WindowsAutostart

app = Flask(__name__)
CORS(app)

# Initialize data manager
data_manager = EncryptedDataManager()
autostart_manager = WindowsAutostart()

# Global variables for auto-save
auto_save_enabled = True
auto_save_thread = None

def auto_save_worker():
    """Background thread for auto-saving"""
    while auto_save_enabled:
        try:
            # Auto-save every 30 seconds by default
            settings = data_manager.load_settings()
            interval = settings.get('autosave_interval', 30)
            time.sleep(interval)
            
            if auto_save_enabled:
                # Trigger auto-save
                print("Auto-saving data...")
        except Exception as e:
            print(f"Auto-save error: {e}")

def start_auto_save():
    """Start the auto-save background thread"""
    global auto_save_thread, auto_save_enabled
    auto_save_enabled = True
    auto_save_thread = threading.Thread(target=auto_save_worker, daemon=True)
    auto_save_thread.start()

def stop_auto_save():
    """Stop the auto-save background thread"""
    global auto_save_enabled
    auto_save_enabled = False

@app.route('/')
def index():
    """Serve the main application page"""
    return render_template('index.html')

@app.route('/api/tasks', methods=['GET'])
def get_tasks():
    """Get all tasks"""
    tasks = data_manager.load_tasks()
    return jsonify(tasks)

@app.route('/api/tasks', methods=['POST'])
def create_task():
    """Create a new task"""
    task_data = request.json
    tasks = data_manager.load_tasks()
    
    # Generate unique ID
    task_id = str(int(time.time() * 1000))
    
    new_task = {
        'id': task_id,
        'title': task_data.get('title', ''),
        'description': task_data.get('description', ''),
        'completed': False,
        'created_at': datetime.now().isoformat(),
        'due_date': task_data.get('due_date'),
        'project': task_data.get('project', ''),
        'scheduled_time': task_data.get('scheduled_time'),
        'estimated_duration': task_data.get('estimated_duration', 60),  # minutes
        'struck_today': False,
        'struck_date': None
    }
    
    tasks.append(new_task)
    
    if data_manager.save_tasks(tasks):
        return jsonify(new_task), 201
    else:
        return jsonify({'error': 'Failed to save task'}), 500

@app.route('/api/tasks/<task_id>', methods=['PUT'])
def update_task(task_id):
    """Update an existing task"""
    task_data = request.json
    tasks = data_manager.load_tasks()
    
    for i, task in enumerate(tasks):
        if task['id'] == task_id:
            tasks[i].update(task_data)
            if data_manager.save_tasks(tasks):
                return jsonify(tasks[i])
            else:
                return jsonify({'error': 'Failed to save task'}), 500
    
    return jsonify({'error': 'Task not found'}), 404

@app.route('/api/tasks/<task_id>', methods=['DELETE'])
def delete_task(task_id):
    """Delete a task"""
    tasks = data_manager.load_tasks()
    
    for i, task in enumerate(tasks):
        if task['id'] == task_id:
            deleted_task = tasks.pop(i)
            if data_manager.save_tasks(tasks):
                return jsonify(deleted_task)
            else:
                return jsonify({'error': 'Failed to save tasks'}), 500
    
    return jsonify({'error': 'Task not found'}), 404

@app.route('/api/tasks/<task_id>/complete', methods=['POST'])
def complete_task(task_id):
    """Mark a task as completed"""
    tasks = data_manager.load_tasks()
    
    for i, task in enumerate(tasks):
        if task['id'] == task_id:
            tasks[i]['completed'] = True
            tasks[i]['completed_at'] = datetime.now().isoformat()
            if data_manager.save_tasks(tasks):
                return jsonify(tasks[i])
            else:
                return jsonify({'error': 'Failed to save task'}), 500
    
    return jsonify({'error': 'Task not found'}), 404

@app.route('/api/tasks/<task_id>/strike', methods=['POST'])
def strike_task(task_id):
    """Unified strike endpoint for both today and forever"""
    strike_data = request.json
    strike_type = strike_data.get('type')
    report = strike_data.get('report', '')
    
    if not strike_type or strike_type not in ['today', 'forever']:
        return jsonify({'error': 'Invalid strike type'}), 400
    
    tasks = data_manager.load_tasks()
    today = datetime.now().strftime('%Y-%m-%d')
    
    for i, task in enumerate(tasks):
        if task['id'] == task_id:
            if strike_type == 'today':
                tasks[i]['struck_today'] = True
                tasks[i]['struck_date'] = today
                tasks[i]['strike_report'] = report
                tasks[i]['strike_count'] = tasks[i].get('strike_count', 0) + 1
            elif strike_type == 'forever':
                tasks[i]['completed'] = True
                tasks[i]['completed_at'] = datetime.now().isoformat()
                tasks[i]['struck_today'] = False
                tasks[i]['struck_date'] = None
                tasks[i]['strike_report'] = report
                tasks[i]['strike_count'] = tasks[i].get('strike_count', 0) + 1
            
            if data_manager.save_tasks(tasks):
                return jsonify(tasks[i])
            else:
                return jsonify({'error': 'Failed to save tasks'}), 500
    
    return jsonify({'error': 'Task not found'}), 404

@app.route('/api/tasks/<task_id>/unschedule', methods=['POST'])
def unschedule_task(task_id):
    """Remove a task from the daily planner"""
    tasks = data_manager.load_tasks()
    
    for i, task in enumerate(tasks):
        if task['id'] == task_id:
            # Remove scheduling information
            tasks[i]['scheduled_hour'] = None
            tasks[i]['scheduled_date'] = None
            tasks[i]['duration'] = None
            
            if data_manager.save_tasks(tasks):
                return jsonify(tasks[i])
            else:
                return jsonify({'error': 'Failed to save tasks'}), 500
    
    return jsonify({'error': 'Task not found'}), 404

@app.route('/api/tasks/<task_id>/schedule', methods=['POST'])
def schedule_task(task_id):
    """Schedule a task for a specific hour and duration"""
    schedule_data = request.json
    hour = schedule_data.get('hour')
    duration = schedule_data.get('duration', 30)  # Default 30 minutes
    date = schedule_data.get('date', datetime.now().strftime('%Y-%m-%d'))
    
    if not hour:
        return jsonify({'error': 'Hour is required'}), 400
    
    tasks = data_manager.load_tasks()
    
    for i, task in enumerate(tasks):
        if task['id'] == task_id:
            tasks[i]['scheduled_hour'] = hour
            tasks[i]['scheduled_date'] = date
            tasks[i]['duration'] = duration
            
            if data_manager.save_tasks(tasks):
                return jsonify(tasks[i])
            else:
                return jsonify({'error': 'Failed to save tasks'}), 500
    
    return jsonify({'error': 'Task not found'}), 404

@app.route('/api/tasks/reset-daily-strikes', methods=['POST'])
def reset_daily_strikes():
    """Reset all daily strikes (called by daily reset timer)"""
    tasks = data_manager.load_tasks()
    today = datetime.now().strftime('%Y-%m-%d')
    
    for i, task in enumerate(tasks):
        if task.get('struck_today') and task.get('struck_date') != today:
            tasks[i]['struck_today'] = False
            tasks[i]['struck_date'] = None
    
    if data_manager.save_tasks(tasks):
        return jsonify({'success': True, 'message': 'Daily strikes reset'})
    else:
        return jsonify({'error': 'Failed to reset daily strikes'}), 500

@app.route('/api/settings', methods=['GET'])
def get_settings():
    """Get application settings"""
    settings = data_manager.load_settings()
    settings['autostart_enabled'] = autostart_manager.is_autostart_enabled()
    # Ensure default values for new settings
    if 'theme' not in settings:
        settings['theme'] = 'orange'
    if 'dpi_scale' not in settings:
        settings['dpi_scale'] = 100
    if 'daily_reset_time' not in settings:
        settings['daily_reset_time'] = '09:00'
    return jsonify(settings)

@app.route('/api/settings', methods=['PUT'])
def update_settings():
    """Update application settings"""
    settings_data = request.json
    current_settings = data_manager.load_settings()
    current_settings.update(settings_data)
    
    # Handle autostart setting
    if 'autostart' in settings_data:
        if settings_data['autostart']:
            autostart_manager.enable_autostart("")
        else:
            autostart_manager.disable_autostart()
    
    if data_manager.save_settings(current_settings):
        return jsonify(current_settings)
    else:
        return jsonify({'error': 'Failed to save settings'}), 500

@app.route('/api/settings/password', methods=['POST'])
def change_password():
    """Change encryption password"""
    password_data = request.json
    new_password = password_data.get('new_password')
    current_password = password_data.get('current_password')
    
    if not new_password or not current_password:
        return jsonify({'error': 'Both current and new passwords are required'}), 400
    
    # Verify current password by trying to decrypt data
    try:
        # Create a temporary data manager with current password
        temp_manager = EncryptedDataManager(password=current_password)
        temp_manager.load_tasks()  # This will fail if password is wrong
    except Exception:
        return jsonify({'error': 'Current password is incorrect'}), 401
    
    # Change password
    if data_manager.change_password(new_password):
        return jsonify({'success': True, 'message': 'Password changed successfully'})
    else:
        return jsonify({'error': 'Failed to change password'}), 500

@app.route('/api/planner/schedule', methods=['GET'])
def get_schedule():
    """Get daily schedule"""
    date = request.args.get('date', datetime.now().strftime('%Y-%m-%d'))
    tasks = data_manager.load_tasks()
    
    # Filter tasks for the specific date
    scheduled_tasks = []
    for task in tasks:
        if task.get('scheduled_time') and task.get('scheduled_date') == date:
            scheduled_tasks.append(task)
    
    return jsonify(scheduled_tasks)

@app.route('/api/planner/schedule', methods=['POST'])
def update_schedule():
    """Update daily schedule"""
    schedule_data = request.json
    tasks = data_manager.load_tasks()
    
    # Update task scheduling
    for task_update in schedule_data:
        task_id = task_update.get('task_id')
        scheduled_time = task_update.get('scheduled_time')
        scheduled_date = task_update.get('scheduled_date')
        
        for task in tasks:
            if task['id'] == task_id:
                task['scheduled_time'] = scheduled_time
                task['scheduled_date'] = scheduled_date
                break
    
    if data_manager.save_tasks(tasks):
        return jsonify({'success': True})
    else:
        return jsonify({'error': 'Failed to save schedule'}), 500

if __name__ == '__main__':
    # Start auto-save
    start_auto_save()
    
    # Open browser automatically
    import webbrowser
    import threading
    
    def open_browser():
        import time
        time.sleep(1.5)  # Wait for server to start
        webbrowser.open('http://127.0.0.1:5000')
    
    # Start browser in a separate thread
    browser_thread = threading.Thread(target=open_browser)
    browser_thread.daemon = True
    browser_thread.start()
    
    # Run the Flask app
    print("🚀 Starting Shakshuka...")
    print("📱 Opening browser at http://127.0.0.1:5000")
    print("⏹️  Press Ctrl+C to stop the application")
    print()
    
    app.run(host='127.0.0.1', port=5000, debug=False)
